<html xmlns:o="urn:schemas-microsoft-com:office:office"
xmlns:dt="uuid:C2F41010-65B3-11d1-A29F-00AA00C14882"
xmlns="http://www.w3.org/TR/REC-html40">

<head>
<meta http-equiv=Content-Type content="text/html; charset=utf-8">
<meta name=ProgId content=OneNote.File>
<meta name=Generator content="Microsoft OneNote 15">
<link id=Main-File rel=Main-File href="%5bCallables%5d%5bC++%20vs%20Java%5d.htm">
<link rel=File-List
href="%5bCallables%5d%5bC++%20vs%20Java%5d_files/filelist.xml">
</head>

<body lang=en-US style='font-family:Calibri;font-size:11.0pt'>

<div style='direction:ltr;border-width:100%'>

<div style='direction:ltr;margin-top:0in;margin-left:0in;width:8.8916in'>

<table border=0 cellpadding=0 cellspacing=0 cols=4 valign=top style='direction:
 ltr;border-collapse:collapse;border-width:0pt;margin-top:0in;margin-left:0in;
 width:7.6583in'>
 <tr>
  <td valign=top style='vertical-align:top;margin:0in;padding:0pt;width:1px;
  height:1px;font-size:1pt'>
  <p style='font-size:1pt'>&nbsp;</p>
  </td>
  <td valign=top style='vertical-align:top;margin:0in;padding:0pt;width:1.9458in;
  height:1px;font-size:1pt'>
  <p style='font-size:1pt'></p>
  </td>
  <td valign=top style='vertical-align:top;margin:0in;padding:0pt;width:1.1597in;
  height:1px;font-size:1pt'>
  <p style='font-size:1pt'></p>
  </td>
  <td valign=top style='vertical-align:top;margin:0in;padding:0pt;width:2.6437in;
  height:1px;font-size:1pt'>
  <p style='font-size:1pt'></p>
  </td>
  <td valign=top style='vertical-align:top;margin:0in;padding:0pt;width:1.9083in;
  height:1px;font-size:1pt'>
  <p style='font-size:1pt'></p>
  </td>
 </tr>
 <tr>
  <td valign=top style='vertical-align:top;margin:0in;padding:0pt;width:1px;
  height:.2493in;font-size:1pt'>
  <p style='font-size:1pt'>&nbsp;</p>
  </td>
  <td colspan=2 rowspan=2 valign=top style='vertical-align:top;margin:0in;
  padding:0pt;width:3.1062in;height:.3479in'>
  <p style='margin:0in;font-family:"Calibri Light";font-size:20.0pt'>[Callables][C++
  vs Java]</p>
  </td>
  <td valign=top style='vertical-align:top;margin:0in;padding:0pt;width:2.6437in;
  height:.2493in;font-size:1pt'>
  <p style='font-size:1pt'></p>
  </td>
  <td valign=top style='vertical-align:top;margin:0in;padding:0pt;width:1.9083in;
  height:.2493in;font-size:1pt'>
  <p style='font-size:1pt'></p>
  </td>
 </tr>
 <tr>
  <td valign=top style='vertical-align:top;margin:0in;padding:0pt;width:1px;
  height:.0979in;font-size:1pt'>
  <p style='font-size:1pt'>&nbsp;</p>
  </td>
  <td valign=top style='vertical-align:top;margin:0in;padding:0pt;width:2.6437in;
  height:.0979in;font-size:1pt'>
  <p style='font-size:1pt'></p>
  </td>
  <td rowspan=4 valign=top style='vertical-align:top;margin:0in;padding:0pt;
  width:1.9083in;height:.3826in'>
  <p style='margin:0in;font-family:Calibri;font-size:11.0pt'><span
  style='font-weight:bold'>Author</span>: Damir Ljubic</p>
  <p style='margin:0in;font-family:Calibri;font-size:11.0pt'><span
  style='font-weight:bold'>e-mail</span>: damirlj@yahoo.com</p>
  </td>
 </tr>
 <tr>
  <td valign=top style='vertical-align:top;margin:0in;padding:0pt;width:1px;
  height:.0409in;font-size:1pt'>
  <p style='font-size:1pt'>&nbsp;</p>
  </td>
  <td valign=top style='vertical-align:top;margin:0in;padding:0pt;width:1.9458in;
  height:.0409in;font-size:1pt'>
  <p style='font-size:1pt'></p>
  </td>
  <td valign=top style='vertical-align:top;margin:0in;padding:0pt;width:1.1597in;
  height:.0409in;font-size:1pt'>
  <p style='font-size:1pt'></p>
  </td>
  <td valign=top style='vertical-align:top;margin:0in;padding:0pt;width:2.6437in;
  height:.0409in;font-size:1pt'>
  <p style='font-size:1pt'></p>
  </td>
 </tr>
 <tr>
  <td valign=top style='vertical-align:top;margin:0in;padding:0pt;width:1px;
  height:.1784in;font-size:1pt'>
  <p style='font-size:1pt'>&nbsp;</p>
  </td>
  <td valign=top style='vertical-align:top;margin:0in;padding:0pt;width:1.9458in;
  height:.1784in'>
  <p style='margin:0in;font-family:Calibri;font-size:10.0pt;color:#767676'
  lang=de>Freitag, 4. April 2025</p>
  <p style='margin:0in;font-family:Calibri;font-size:10.0pt;color:#767676'
  lang=de>18:52</p>
  </td>
  <td valign=top style='vertical-align:top;margin:0in;padding:0pt;width:1.1597in;
  height:.1784in;font-size:1pt'>
  <p style='font-size:1pt'></p>
  </td>
  <td valign=top style='vertical-align:top;margin:0in;padding:0pt;width:2.6437in;
  height:.1784in;font-size:1pt'>
  <p style='font-size:1pt'></p>
  </td>
 </tr>
 <tr>
  <td valign=top style='vertical-align:top;margin:0in;padding:0pt;width:1px;
  height:.0645in;font-size:1pt'>
  <p style='font-size:1pt'>&nbsp;</p>
  </td>
  <td valign=top style='vertical-align:top;margin:0in;padding:0pt;width:1.9458in;
  height:.0645in;font-size:1pt'>
  <p style='font-size:1pt'></p>
  </td>
  <td valign=top style='vertical-align:top;margin:0in;padding:0pt;width:1.1597in;
  height:.0645in;font-size:1pt'>
  <p style='font-size:1pt'></p>
  </td>
  <td valign=top style='vertical-align:top;margin:0in;padding:0pt;width:2.6437in;
  height:.0645in;font-size:1pt'>
  <p style='font-size:1pt'></p>
  </td>
 </tr>
</table>

<div style='direction:ltr;margin-top:.368in;margin-left:0in;width:8.8916in'>

<h1 style='margin:0in;font-family:Calibri;font-size:16.0pt;color:#1E4E79'>Intro</h1>

<p style='margin:0in;font-family:Calibri;font-size:11.0pt'>&nbsp;</p>

<p style='margin:0in;font-family:Calibri;font-size:11.0pt'>When I've started
with Java (and that was long time ago) - the first obstacle that I've
encountered<span style='mso-spacerun:yes'>  </span>coming from </p>

<p style='margin:0in;font-family:Calibri;font-size:11.0pt'>C++ world was<span
style='mso-spacerun:yes'>  </span>how to implement the <span style='font-weight:
bold;font-style:italic'>higher-order function</span>: a function that either
takes another function as an </p>

<p style='margin:0in;font-family:Calibri;font-size:11.0pt'>argument, and/or
even returns one.</p>

<p style='margin:0in;font-family:Calibri;font-size:11.0pt'>&nbsp;</p>

<p style='margin:0in;font-family:Calibri;font-size:11.0pt'>Let's see how we can
accomplish this task in both languages, and what parallels can be drawn.</p>

<p style='margin:0in;font-family:Calibri;font-size:11.0pt'>&nbsp;</p>

<h2 style='margin:0in;font-family:Calibri;font-size:14.0pt;color:#2E75B5'>C++
approach</h2>

<p style='margin:0in;font-family:Calibri;font-size:11.0pt'>&nbsp;</p>

<p style='margin:0in;font-family:Calibri;font-size:11.0pt'>In C++ this is quite
straight forward: you just need to specify the <span style='font-style:italic'>signature
</span>that function has to satisfy</p>

<p style='margin:0in;font-family:Calibri;font-size:11.0pt'>&nbsp;</p>

<p style='margin:0in;font-family:"Courier New";font-size:10.0pt'><span
style='color:#0080C0'>template </span><span style='font-weight:bold;color:#FF0080'>&lt;</span><span
style='color:black'>typename R</span><span style='font-weight:bold;color:#FF0080'>&gt;</span></p>

<p style='margin:0in;font-family:"Courier New";font-size:10.0pt'><span
style='font-weight:bold;color:#BB7977'>using </span><span style='font-weight:
bold;color:black'>callable_type </span><span style='font-weight:bold;
color:#FF0080'>= </span><span style='color:#004466'>R </span><span
style='font-weight:bold;color:#FF0080'>(*)(</span><span style='color:#0080C0'>std</span><span
style='font-weight:bold;color:#FF0080'>::</span><span style='color:black'>string</span><span
style='font-weight:bold;color:#FF0080'>);</span></p>

<p style='margin:0in;font-family:Calibri;font-size:11.0pt'>&nbsp;</p>

<p style='margin:0in;font-family:Calibri;font-size:11.0pt'>where the <span
style='font-style:italic'>callable_type</span> defines the signature of the <span
style='font-weight:bold'>free function</span>.</p>

<p style='margin:0in;font-family:Calibri;font-size:11.0pt'>&nbsp;</p>

<p style='margin:0in;font-family:Calibri;font-size:11.0pt'>At the client side</p>

<p style='margin:0in;font-family:Calibri;font-size:11.0pt'>&nbsp;</p>

<p style='margin:0in;font-family:"Courier New";font-size:10.0pt'><span
style='font-weight:bold;color:#8080C0'>void </span><span style='font-weight:
bold;color:#004466'>func</span><span style='font-weight:bold;color:#FF0080'>(</span><span
style='color:#0080C0'>std</span><span style='font-weight:bold;color:#FF0080'>::</span><span
style='color:black'>vector</span><span style='font-weight:bold;color:#FF0080'>&lt;</span><span
style='color:#0080C0'>std</span><span style='font-weight:bold;color:#FF0080'>::</span><span
style='color:black'>string</span><span style='font-weight:bold;color:#FF0080'>&gt;</span><span
style='color:black'> input</span><span style='font-weight:bold;color:#FF0080'>,
</span><span style='font-weight:bold;color:black'>callable_type</span><span
style='font-weight:bold;color:#FF0080'>&lt;</span><span style='font-weight:
bold;color:#8080C0'>void</span><span style='font-weight:bold;color:#FF0080'>&gt;
</span><span style='color:black;background:#CCFFFF'>callback</span><span
style='font-weight:bold;color:#FF0080'>) {</span></p>

<p style='margin:0in;font-family:"Courier New";font-size:10.0pt'><span
style='color:black'>&nbsp;&nbsp;&nbsp;&nbsp;</span><span style='font-weight:
bold;color:#BB7977'>for </span><span style='font-weight:bold;color:#FF0080'>(</span><span
style='font-weight:bold;color:#8080C0'>const </span><span style='color:#0080C0'>auto</span><span
style='font-weight:bold;color:#FF0080'>&amp;</span><span style='color:black'>
in </span><span style='font-weight:bold;color:#FF0080'>:</span><span
style='color:black'> input</span><span style='font-weight:bold;color:#FF0080'>)
{</span></p>

<p style='margin:0in;font-family:"Courier New";font-size:10.0pt'><span
style='color:black'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span
style='color:#004466'>callback</span><span style='font-weight:bold;color:#FF0080'>(</span><span
style='color:black'>in</span><span style='font-weight:bold;color:#FF0080'>);</span></p>

<p style='margin:0in;font-family:"Courier New";font-size:10.0pt'><span
style='color:black'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span
style='color:#F27900'>// std::invoke(callback, in);</span></p>

<p style='margin:0in;font-family:"Courier New";font-size:10.0pt'><span
style='color:black'>&nbsp;&nbsp;&nbsp;&nbsp;</span><span style='font-weight:
bold;color:#FF0080'>}</span></p>

<p style='margin:0in;font-family:"Courier New";font-size:10.0pt;color:#FF0080'><span
style='font-weight:bold'>}</span></p>

<p style='margin:0in;font-family:Calibri;font-size:11.0pt'>&nbsp;</p>

<p style='margin:0in;font-family:Calibri;font-size:11.0pt'>our higher-order
function can lift this - visiting all elements in array and applying the same
functionality accordingly.</p>

<p style='margin:0in;font-family:Calibri;font-size:11.0pt'>This way, our
callable type becomes the <span style='font-style:italic'>customization poin</span>t
(Strategy Design Pattern): any callable that </p>

<p style='margin:0in;font-family:Calibri;font-size:11.0pt'>satisfies the
signature, can be applied (!)</p>

<p style='margin:0in;font-family:"Courier New";font-size:10.0pt;color:#FF0080'>&nbsp;</p>

<p style='margin:0in;font-family:Calibri;font-size:11.0pt'>If we want to
restrict to the <span style='font-style:italic'>non-static member function</span>
of a particular UDT, we can redefine it as</p>

<p style='margin:0in;font-family:Calibri;font-size:11.0pt'>&nbsp;</p>

<p style='margin:0in;font-family:"Courier New";font-size:10.0pt'><span
style='color:#0080C0'>template </span><span style='font-weight:bold;color:#FF0080'>&lt;</span><span
style='color:black'>typename R</span><span style='font-weight:bold;color:#FF0080'>,
</span><span style='color:#0080C0'>class</span><span style='color:black'> T</span><span
style='font-weight:bold;color:#FF0080'>&gt;</span></p>

<p style='margin:0in;font-family:"Courier New";font-size:10.0pt'><span
style='font-weight:bold;color:#BB7977'>using </span><span style='font-weight:
bold;color:black'>callable_type </span><span style='font-weight:bold;
color:#FF0080'>= </span><span style='color:#004466'>R </span><span
style='font-weight:bold;color:#FF0080'>(</span><span style='color:#0080C0'>T</span><span
style='font-weight:bold;color:#FF0080'>::*)(</span><span style='color:#0080C0'>std</span><span
style='font-weight:bold;color:#FF0080'>::</span><span style='color:black'>string</span><span
style='font-weight:bold;color:#FF0080'>);</span></p>

<p style='margin:0in;font-family:Calibri;font-size:11.0pt'>&nbsp;</p>

<p style='margin:0in;font-family:Calibri;font-size:11.0pt'>@note <span
style='font-weight:bold;font-style:italic'>std::function</span> is universal,
polymorphic placeholder for any callable: but this is out of the scope right
now.</p>

<p style='margin:0in;font-family:Calibri;font-size:11.0pt'>&nbsp;</p>

<p style='margin:0in;font-family:"Courier New";font-size:10.0pt'><span
style='color:#0080C0'>template </span><span style='font-weight:bold;color:#FF0080'>&lt;</span><span
style='color:#0080C0'>class</span><span style='color:black'> T</span><span
style='font-weight:bold;color:#FF0080'>&gt;</span></p>

<p style='margin:0in;font-family:"Courier New";font-size:10.0pt'><span
style='font-weight:bold;color:#8080C0'>void </span><span style='font-weight:
bold;color:#004466'>func</span><span style='font-weight:bold;color:#FF0080'>(</span><span
style='color:#0080C0'>std</span><span style='font-weight:bold;color:#FF0080'>::</span><span
style='color:black'>vector</span><span style='font-weight:bold;color:#FF0080'>&lt;</span><span
style='color:#0080C0'>std</span><span style='font-weight:bold;color:#FF0080'>::</span><span
style='color:black'>string</span><span style='font-weight:bold;color:#FF0080'>&gt;</span><span
style='color:black'> input</span><span style='font-weight:bold;color:#FF0080'>,
</span><span style='font-weight:bold;color:black'>callable_type</span><span
style='font-weight:bold;color:#FF0080'>&lt;</span><span style='font-weight:
bold;color:#8080C0'>void</span><span style='font-weight:bold;color:#FF0080'>&gt;</span><span
style='color:black'> callback</span><span style='font-weight:bold;color:#FF0080'>,
</span><span style='color:black;background:#FFFF99'>T</span><span
style='font-weight:bold;color:#FF0080;background:#FFFF99'>&amp;</span><span
style='color:black;background:#FFFF99'> obj</span><span style='font-weight:
bold;color:#FF0080'>) {</span></p>

<p style='margin:0in;font-family:"Courier New";font-size:10.0pt'><span
style='color:black'>&nbsp;&nbsp;&nbsp;&nbsp;</span><span style='font-weight:
bold;color:#BB7977'>for </span><span style='font-weight:bold;color:#FF0080'>(</span><span
style='font-weight:bold;color:#8080C0'>const </span><span style='color:#0080C0'>auto</span><span
style='font-weight:bold;color:#FF0080'>&amp;</span><span style='color:black'>
in </span><span style='font-weight:bold;color:#FF0080'>:</span><span
style='color:black'> input</span><span style='font-weight:bold;color:#FF0080'>)
{</span></p>

<p style='margin:0in;font-family:"Courier New";font-size:10.0pt'><span
style='color:black'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span
style='font-weight:bold;color:#FF0080'>(</span><span style='color:black'>obj</span><span
style='font-weight:bold;color:#FF0080'>.*</span><span style='color:black'>callback</span><span
style='font-weight:bold;color:#FF0080'>)(</span><span style='color:black'>in</span><span
style='font-weight:bold;color:#FF0080'>);</span></p>

<p style='margin:0in;font-family:"Courier New";font-size:10.0pt;color:#F27900'><span
style='mso-spacerun:yes'>        </span>// (ptr-&gt;*callback)(in); // in case
that we pass the pointer</p>

<p style='margin:0in;font-family:"Courier New";font-size:10.0pt'><span
style='color:black'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span
style='color:#F27900'>// std::invoke(callback, </span><span style='color:#F27900;
background:#FFFF99'>obj</span><span style='color:#F27900'>, in);</span></p>

<p style='margin:0in;font-family:"Courier New";font-size:10.0pt'><span
style='color:black'>&nbsp;&nbsp;&nbsp;</span><span style='font-weight:bold;
color:#FF0080'>}</span></p>

<p style='margin:0in;font-family:"Courier New";font-size:10.0pt;color:#FF0080'><span
style='font-weight:bold'>}</span></p>

<p style='margin:0in;font-family:Calibri;font-size:11.0pt'>&nbsp;</p>

<p style='margin:0in;font-family:Calibri;font-size:11.0pt'>Back to signature.</p>

<p style='margin:0in;font-family:Calibri;font-size:11.0pt'>It becomes even more
obvious using the <span style='font-style:italic'>std::invoke</span> utility
function, that the instance of the UDT needs to be the </p>

<p style='margin:0in;font-family:Calibri;font-size:11.0pt'>very first argument
of any non-static member function invocation.</p>

<p style='margin:0in;font-family:Calibri;font-size:11.0pt'>Welcome to the world
of OO programming.</p>

<p style='margin:0in;font-family:Calibri;font-size:11.0pt'>&nbsp;</p>

<h3 style='margin:0in;font-family:Calibri;font-size:11.0pt'>&nbsp;</h3>

<h3 style='margin:0in;font-family:Calibri;font-size:12.0pt;color:#7030A0'>Variadic
arguments pack</h3>

<p style='margin:0in;font-family:Calibri;font-size:11.0pt'>&nbsp;</p>

<p style='margin:0in;font-family:Calibri;font-size:11.0pt'>Where C++ prevails
is that with C++ we can specify really generic: universal function signature, </p>

<p style='margin:0in;font-family:Calibri;font-size:11.0pt'>with arbitrary
number of arguments - even of a different type, using <span style='font-weight:
bold'>variadic arguments</span> pack</p>

<p style='margin:0in;font-family:Calibri;font-size:11.0pt'>&nbsp;</p>

<p style='margin:0in;font-family:"Courier New";font-size:10.0pt'><span
style='color:#0080C0'>template </span><span style='font-weight:bold;color:#FF0080'>&lt;</span><span
style='color:black'>typename R</span><span style='font-weight:bold;color:#FF0080'>,
</span><span style='color:black;background:#FDEADA'>typename</span><span
style='font-weight:bold;color:#FF0080;background:#FDEADA'>...</span><span
style='color:black;background:#FDEADA'>Args</span><span style='font-weight:
bold;color:#FF0080'>&gt;</span></p>

<p style='margin:0in;font-family:"Courier New";font-size:10.0pt'><span
style='font-weight:bold;color:#BB7977'>using </span><span style='font-weight:
bold;color:black'>universal_callback_type </span><span style='font-weight:bold;
color:#FF0080'>= </span><span style='color:#004466'>R </span><span
style='font-weight:bold;color:#FF0080'>(*)(</span><span style='color:black;
background:#FDEADA'>Args</span><span style='font-weight:bold;color:#FF0080;
background:#FDEADA'>&amp;&amp;...</span><span style='font-weight:bold;
color:#FF0080'>);</span></p>

<p style='margin:0in;font-family:Calibri;font-size:11.0pt'>&nbsp;</p>

<p style='margin:0in;font-family:Calibri;font-size:11.0pt'>@note We can also
add the <span style='font-style:italic;background:#EBF1DD'>const qualifier</span>
to signature - to make the function's enclosing type T immutable</p>

<p style='margin:0in;font-family:"Courier New";font-size:10.0pt;color:#FF0080'>&nbsp;</p>

<p style='margin:0in;font-family:"Courier New";font-size:10.0pt'><span
style='color:#0080C0'>template </span><span style='font-weight:bold;color:#FF0080'>&lt;</span><span
style='color:black'>typename R</span><span style='font-weight:bold;color:#FF0080'>,
</span><span style='color:black;background:#EBF1DD'>typename T</span><span
style='font-weight:bold;color:#FF0080'>,</span><span style='color:black'>
typename</span><span style='font-weight:bold;color:#FF0080'>...</span><span
style='color:black'>Args</span><span style='font-weight:bold;color:#FF0080'>&gt;</span></p>

<p style='margin:0in;font-family:"Courier New";font-size:10.0pt'><span
style='font-weight:bold;color:#BB7977'>using </span><span style='font-weight:
bold;color:black'>universal_callback_type </span><span style='font-weight:bold;
color:#FF0080'>= </span><span style='color:#004466'>R </span><span
style='font-weight:bold;color:#FF0080'>(</span><span style='color:#0080C0;
background:#EBF1DD'>T</span><span style='font-weight:bold;color:#FF0080;
background:#EBF1DD'>::*</span><span style='font-weight:bold;color:#FF0080'>)(</span><span
style='font-weight:bold;color:#8080C0'>const</span><span style='color:black'>
Args</span><span style='font-weight:bold;color:#FF0080'>&amp;&amp;...) </span><span
style='font-weight:bold;color:#8080C0;background:#EBF1DD'>const</span><span
style='font-weight:bold;color:#FF0080'>;</span></p>

<p style='margin:0in;font-family:Calibri;font-size:11.0pt'>&nbsp;</p>

<p style='margin:0in;font-family:Calibri;font-size:11.0pt'>@note Actually, we
can add <span style='font-style:italic'>volatile</span> qualifier as well -
which means, that the function will be called on the </p>

<p style='margin:0in;font-family:Calibri;font-size:11.0pt'>volatile instance of
the enclosing class T</p>

<p style='margin:0in;font-family:Calibri;font-size:11.0pt'>&nbsp;</p>

<h3 style='margin:0in;font-family:Calibri;font-size:12.0pt;color:#7030A0'>Exception
in signature</h3>

<p style='margin:0in;font-family:Calibri;font-size:11.0pt'>&nbsp;</p>

<p style='margin:0in;font-family:Calibri;font-size:11.0pt'>In C++<span
style='mso-spacerun:yes'>  </span>- one can also specify explicitly - as part
of the function signature, whether </p>

<p style='margin:0in;font-family:Calibri;font-size:11.0pt'>the function may
throw </p>

<p style='margin:0in;font-family:Calibri;font-size:11.0pt'>&nbsp;</p>

<p style='margin:0in;font-family:"Courier New";font-size:10.0pt'><span
style='color:#0080C0'>template </span><span style='font-weight:bold;color:#FF0080'>&lt;</span><span
style='color:black'>typename R</span><span style='font-weight:bold;color:#FF0080'>&gt;</span></p>

<p style='margin:0in;font-family:"Courier New";font-size:10.0pt'><span
style='font-weight:bold;color:#BB7977'>using </span><span style='font-weight:
bold;color:black'>callback_type </span><span style='font-weight:bold;
color:#FF0080'>= </span><span style='color:#004466'>R </span><span
style='font-weight:bold;color:#FF0080'>(*)(</span><span style='font-weight:
bold;color:#8080C0'>void</span><span style='font-weight:bold;color:#FF0080'>) </span><span
style='font-weight:bold;color:#BB7977'>throw </span><span style='font-weight:
bold;color:#FF0080'>(</span><span style='color:#0080C0'>std</span><span
style='font-weight:bold;color:#FF0080'>::</span><span style='color:black'>logic_error</span><span
style='font-weight:bold;color:#FF0080'>);</span></p>

<p style='margin:0in;font-family:"Courier New";font-size:10.0pt;color:#FF0080'>&nbsp;</p>

<p style='margin:0in;font-family:Calibri;font-size:11.0pt'>Starting with C++11
- this is considered deprecated.</p>

<p style='margin:0in;font-family:Calibri;font-size:11.0pt'>Instead - assuming
that every function (except destructor) can implicitly throw, as a hint to
compiler </p>

<p style='margin:0in;font-family:Calibri;font-size:11.0pt'>there is a new
operator <span style='font-weight:bold;font-style:italic'>noexcept </span>that
indicates whether the function may throw - or not</p>

<p style='margin:0in;font-family:Calibri;font-size:11.0pt'>(noexcept ==
noexcept(true)): it can be conditionally expressed</p>

<p style='margin:0in;font-family:Calibri;font-size:11.0pt'>&nbsp;</p>

<p style='margin:0in;font-family:"Courier New";font-size:10.0pt'><span
style='color:#0080C0'>template </span><span style='font-weight:bold;color:#FF0080'>&lt;</span><span
style='color:black'>typename R</span><span style='font-weight:bold;color:#FF0080'>,</span><span
style='color:black'> typename Arg</span><span style='font-weight:bold;
color:#FF0080'>&gt;</span></p>

<p style='margin:0in;font-family:"Courier New";font-size:10.0pt'><span
style='font-weight:bold;color:#BB7977'>using </span><span style='font-weight:
bold;color:black'>callback_type </span><span style='font-weight:bold;
color:#FF0080'>= </span><span style='color:#004466'>R </span><span
style='font-weight:bold;color:#FF0080'>(*)(</span><span style='color:black'>Arg</span><span
style='font-weight:bold;color:#FF0080'>) </span><span style='font-weight:bold;
color:#BB7977'>noexcept </span><span style='font-weight:bold;color:#FF0080'>(</span><span
style='color:#0080C0'>std</span><span style='font-weight:bold;color:#FF0080'>::</span><span
style='color:black'>is_nothrow_copy_constructible_v</span><span
style='font-weight:bold;color:#FF0080'>&lt;</span><span style='color:black'>Arg</span><span
style='font-weight:bold;color:#FF0080'>&gt;);</span></p>

<p style='margin:0in;font-family:Calibri;font-size:11.0pt'>&nbsp;</p>

<p style='margin:0in;font-family:Calibri;font-size:11.0pt'>As a consequence -
there will be no stack unwinding in order to propagate the exception to the </p>

<p style='margin:0in;font-family:Calibri;font-size:11.0pt'>outer functions that
presumably catch and handle exception: but rather if the exception is thrown -
the program </p>

<p style='margin:0in;font-family:Calibri;font-size:11.0pt'>will terminate
(std::terminate)</p>

<p style='margin:0in;font-family:Calibri;font-size:11.0pt'>&nbsp;</p>

<p style='margin:0in;font-family:Calibri;font-size:11.0pt'>&nbsp;</p>

<h2 style='margin:0in;font-family:Calibri;font-size:14.0pt;color:#2E75B5'>Java
approach</h2>

<p style='margin:0in;font-family:Calibri;font-size:11.0pt'>&nbsp;</p>

<p style='margin:0in;font-family:Calibri;font-size:11.0pt'>So, how we can
accomplish the same with Java?</p>

<p style='margin:0in;font-family:Calibri;font-size:11.0pt'>And Java is indeed
the pure OO language.</p>

<p style='margin:0in;font-family:Calibri;font-size:11.0pt'>&nbsp;</p>

<p style='margin:0in;font-family:Calibri;font-size:11.0pt'>In Java, we can
specify a custom <span style='font-weight:bold'>callback interface</span></p>

<p style='margin:0in;font-family:Calibri;font-size:11.0pt'>&nbsp;</p>

<p style='margin:0in;font-family:"Courier New";font-size:10.0pt;color:#0080C0'>@FunctionalInterface</p>

<p style='margin:0in;font-family:"Courier New";font-size:10.0pt'><span
style='font-weight:bold;color:#BB7977'>interface </span><span style='font-weight:
bold;color:black'>CallbableType</span><span style='font-weight:bold;color:#FF0080'>&lt;</span><span
style='color:black'>R, T</span><span style='font-weight:bold;color:#FF0080'>&gt;
{</span></p>

<p style='margin:0in;font-family:"Courier New";font-size:10.0pt'><span
style='color:black'>&nbsp;&nbsp;&nbsp; R </span><span style='color:#004466'>apply</span><span
style='font-weight:bold;color:#FF0080'>(T obj);</span></p>

<p style='margin:0in;font-family:"Courier New";font-size:10.0pt;color:#FF0080'><span
style='font-weight:bold'>}</span></p>

<p style='margin:0in;font-family:"Courier New";font-size:10.0pt;color:#FF0080'>&nbsp;</p>

<p style='margin:0in;font-family:Calibri;font-size:11.0pt'>This would be
equivalent to defining the non-static member function of T, that is <span
style='font-weight:bold'>parameterless</span> - since the very first argument </p>

<p style='margin:0in;font-family:Calibri;font-size:11.0pt'>must be the instance
on which the method will be invoked.</p>

<p style='margin:0in;font-family:Calibri;font-size:11.0pt'>&nbsp;</p>

<p style='margin:0in;font-family:Calibri;font-size:11.0pt'>Then, we define the
higher-order function as </p>

<p style='margin:0in;font-family:Calibri;font-size:11.0pt'>&nbsp;</p>

<p style='margin:0in;font-family:"Courier New";font-size:10.0pt'><span
style='font-weight:bold;color:#FF0080'>&lt;</span><span style='color:black'>R,
T</span><span style='font-weight:bold;color:#FF0080'>&gt;</span><span
style='color:black'> R </span><span style='font-weight:bold;color:#004466'>func</span><span
style='font-weight:bold;color:#FF0080'>(</span><span style='color:#0080C0'>@NonNull
</span><span style='font-weight:bold;color:black'>CallableType</span><span
style='font-weight:bold;color:#FF0080'>&lt;</span><span style='color:black'>R,
T</span><span style='font-weight:bold;color:#FF0080'>&gt; </span><span
style='color:black;background:#CCFFCC'>callback, </span><span style='color:
black;background:#FFFF99'>T obj</span><span style='font-weight:bold;color:#FF0080'>)
{</span></p>

<p style='margin:0in;font-family:"Courier New";font-size:10.0pt'><span
style='color:black'>&nbsp;&nbsp;&nbsp;&nbsp;</span><span style='color:#F27900'>//
do something</span></p>

<p style='margin:0in;font-family:"Courier New";font-size:10.0pt'><span
style='color:black'>&nbsp;&nbsp;&nbsp;&nbsp;</span><span style='font-weight:
bold;color:#BB7977'>return </span><span style='color:black;background:#CCFFCC'>callback</span><span
style='font-weight:bold;color:#FF0080'>.</span><span style='color:#004466'>apply</span><span
style='font-weight:bold;color:#FF0080'>(</span><span style='color:#004466;
background:#FFFF99'>obj</span><span style='font-weight:bold;color:#FF0080'>);</span></p>

<p style='margin:0in;font-family:"Courier New";font-size:10.0pt;color:#FF0080'><span
style='font-weight:bold'>}</span></p>

<p style='margin:0in;font-family:"Courier New";font-size:10.0pt;color:#FF0080'>&nbsp;</p>

<p style='margin:0in;font-family:Calibri;font-size:11.0pt'>This is similar
calling the std::invoke, providing the instance of T, as a first argument </p>

<p style='margin:0in;font-family:Calibri;font-size:11.0pt'>&nbsp;</p>

<p style='margin:0in;font-family:Calibri;font-size:11.0pt'>We can, on the place
where <span style='font-style:italic'>callback</span> is expected, provide:</p>

<ul type=disc style='direction:ltr;unicode-bidi:embed;margin-top:0in;
 margin-bottom:0in'>
 <li style='margin-top:0;margin-bottom:0;vertical-align:middle'><span
     style='font-family:Calibri;font-size:11.0pt'><span
     style='mso-spacerun:yes'> </span>Reference to the non-static member
     function of the enclosing class </span></li>
</ul>

<p style='margin:0in;margin-left:.375in;font-family:"Courier New";font-size:
10.0pt'><span style='font-weight:bold;color:#BB7977'>this</span><span
style='font-weight:bold;color:#FF0080'>::&lt;</span><span style='color:black'>function</span><span
style='font-weight:bold;color:#FF0080'>&gt;</span></p>

<ul type=disc style='direction:ltr;unicode-bidi:embed;margin-top:0in;
 margin-bottom:0in'>
 <li style='margin-top:0;margin-bottom:0;vertical-align:middle'><span
     style='font-family:Calibri;font-size:11.0pt'>Reference to the non-static
     member function of another class,<span style='mso-spacerun:yes'> 
     </span>for which we need to provide argument as well</span></li>
</ul>

<p style='margin:0in;margin-left:.375in;font-family:"Courier New";font-size:
10.0pt'><span style='font-weight:bold;color:#FF0080'>&lt;</span><span
style='color:black'>Class</span><span style='font-weight:bold;color:#FF0080'>&gt;::&lt;</span><span
style='color:black'>function</span><span style='font-weight:bold;color:#FF0080'>&gt;</span></p>

<ul type=disc style='direction:ltr;unicode-bidi:embed;margin-top:0in;
 margin-bottom:0in'>
 <li style='margin-top:0;margin-bottom:0;vertical-align:middle'><span
     style='font-family:Calibri;font-size:11.0pt'>We can provide the </span><span
     style='font-weight:bold;font-family:Calibri;font-size:11.0pt'>lambda</span><span
     style='font-family:Calibri;font-size:11.0pt'> object on the fly, that
     satisfies the signature</span></li>
</ul>

<p style='margin:0in;margin-left:.375in;font-family:"Courier New";font-size:
10.0pt'><span style='font-weight:bold;color:#FF0080'>(</span><span
style='color:black'>obj</span><span style='font-weight:bold;color:#FF0080'>)-&gt;
{</span></p>

<p style='margin:0in;margin-left:.375in;font-family:"Courier New";font-size:
10.0pt'><span style='color:black'>&nbsp;&nbsp;&nbsp;&nbsp;</span><span
style='color:#F27900'>// do something</span></p>

<p style='margin:0in;margin-left:.375in;font-family:"Courier New";font-size:
10.0pt'><span style='color:black'>&nbsp;&nbsp;&nbsp;&nbsp;</span><span
style='font-weight:bold;color:#BB7977'>return</span><span style='color:black'>
obj</span><span style='font-weight:bold;color:#FF0080'>.&lt;</span><span
style='color:black'>func</span><span style='font-weight:bold;color:#FF0080'>&gt;();</span></p>

<p style='margin:0in;margin-left:.375in;font-family:"Courier New";font-size:
10.0pt;color:#FF0080'><span style='font-weight:bold'>}</span></p>

<p style='margin:0in;margin-left:.375in;font-family:"Courier New";font-size:
10.0pt;color:#FF0080'>&nbsp;</p>

<p style='margin:0in;font-family:Calibri;font-size:11.0pt'>Pay attention - we
don't explicitly implement the functional interface: we use it as a <span
style='font-style:italic'>placeholder</span> for providing </p>

<p style='margin:0in;font-family:Calibri;font-size:11.0pt'>the already existing
callables that <span style='background:#CCFFCC'>satisfy the signature</span></p>

<p style='margin:0in;font-family:Calibri;font-size:11.0pt'>&nbsp;</p>

<p style='margin:0in;font-family:"Courier New";font-size:10.0pt'><span
style='font-weight:bold;color:#BB7977'>private </span><span style='font-weight:
bold;color:#FF0080'>&lt;</span><span style='color:black'>R</span><span
style='font-weight:bold;color:#FF0080'>&gt;</span><span style='color:black'>
List</span><span style='font-weight:bold;color:#FF0080'>&lt;</span><span
style='color:black'>R</span><span style='font-weight:bold;color:#FF0080'>&gt; </span><span
style='font-weight:bold;color:#004466'>transform</span><span style='font-weight:
bold;color:#FF0080'>(</span><span style='color:#0080C0'>@NonNull</span><span
style='color:black'> List</span><span style='font-weight:bold;color:#FF0080'>&lt;</span><span
style='color:black'>Person</span><span style='font-weight:bold;color:#FF0080'>&gt;</span><span
style='color:black'> list</span><span style='font-weight:bold;color:#FF0080'>, </span><span
style='color:#0080C0'>@NonNull </span><span style='font-weight:bold;color:black'>CallableType</span><span
style='font-weight:bold;color:#FF0080'>&lt;</span><span style='color:black'>R</span><span
style='font-weight:bold;color:#FF0080'>,</span><span style='color:black'>
Person</span><span style='font-weight:bold;color:#FF0080'>&gt;</span><span
style='color:black'> callable</span><span style='font-weight:bold;color:#FF0080'>)
{</span></p>

<p style='margin:0in;font-family:"Courier New";font-size:10.0pt'><span
style='color:black'>&nbsp;&nbsp;&nbsp;&nbsp;</span><span style='font-weight:
bold;color:#BB7977'>return</span><span style='color:black'> list</span><span
style='font-weight:bold;color:#FF0080'>.</span><span style='color:#004466'>stream</span><span
style='font-weight:bold;color:#FF0080'>().</span><span style='color:#004466'>map</span><span
style='font-weight:bold;color:#FF0080'>(</span><span style='font-weight:bold;
color:black;background:#CCFFCC'>callable</span><span style='font-weight:bold;
color:#FF0080;background:#CCFFCC'>::</span><span style='font-weight:bold;
color:black;background:#CCFFCC'>apply</span><span style='font-weight:bold;
color:#FF0080'>).</span><span style='color:#004466'>collect</span><span
style='font-weight:bold;color:#FF0080'>(</span><span style='color:#004466'>toList</span><span
style='font-weight:bold;color:#FF0080'>());</span></p>

<p style='margin:0in;font-family:"Courier New";font-size:10.0pt;color:#FF0080'><span
style='font-weight:bold'>}</span></p>

<p style='margin:0in;font-family:Calibri;font-size:11.0pt'>&nbsp;</p>

<p style='margin:0in;font-family:"Courier New";font-size:10.0pt;color:#0080C0'>@Test</p>

<p style='margin:0in;font-family:"Courier New";font-size:10.0pt'><span
style='font-weight:bold;color:#BB7977'>public void </span><span
style='color:#004466'>testTransformPersonToName</span><span style='font-weight:
bold;color:#FF0080'>() {</span></p>

<p style='margin:0in;font-family:"Courier New";font-size:10.0pt'><span
style='color:black'>&nbsp;&nbsp;&nbsp;&nbsp;List</span><span style='font-weight:
bold;color:#FF0080'>&lt;</span><span style='color:black'>Person</span><span
style='font-weight:bold;color:#FF0080'>&gt;</span><span style='color:black'>
people </span><span style='font-weight:bold;color:#FF0080'>=</span><span
style='color:black'> List</span><span style='font-weight:bold;color:#FF0080'>.</span><span
style='color:#004466'>of</span><span style='font-weight:bold;color:#FF0080'>(</span><span
style='font-weight:bold;color:#BB7977'>new </span><span style='color:#004466'>Person</span><span
style='font-weight:bold;color:#FF0080'>(</span><span style='color:#A68500'>&quot;Alice&quot;</span><span
style='font-weight:bold;color:#FF0080'>, </span><span style='font-weight:bold;
color:purple'>25</span><span style='font-weight:bold;color:#FF0080'>), </span><span
style='font-weight:bold;color:#BB7977'>new </span><span style='color:#004466'>Person</span><span
style='font-weight:bold;color:#FF0080'>(</span><span style='color:#A68500'>&quot;Bob&quot;</span><span
style='font-weight:bold;color:#FF0080'>, </span><span style='font-weight:bold;
color:purple'>30</span><span style='font-weight:bold;color:#FF0080'>));</span></p>

<p style='margin:0in;font-family:"Courier New";font-size:10.0pt;color:#FF0080'>&nbsp;</p>

<p style='margin:0in;font-family:"Courier New";font-size:10.0pt'><span
style='color:black'>&nbsp;&nbsp;&nbsp;&nbsp;</span><span style='color:#004466'>transform</span><span
style='font-weight:bold;color:#FF0080'>(</span><span style='color:black'>people</span><span
style='font-weight:bold;color:#FF0080'>, </span><span style='color:black;
background:#CCFFCC'>Person</span><span style='font-weight:bold;color:#FF0080;
background:#CCFFCC'>::</span><span style='color:black;background:#CCFFCC'>getName</span><span
style='font-weight:bold;color:#FF0080'>).</span><span style='color:#004466'>forEach</span><span
style='font-weight:bold;color:#FF0080'>(</span><span style='color:black'>System</span><span
style='font-weight:bold;color:#FF0080'>.</span><span style='color:black'>out</span><span
style='font-weight:bold;color:#FF0080'>::</span><span style='color:black'>println</span><span
style='font-weight:bold;color:#FF0080'>); </span><span style='color:#F27900'>//
Reference to method</span></p>

<p style='margin:0in;font-family:"Courier New";font-size:10.0pt'><span
style='color:black'>&nbsp;&nbsp;&nbsp;&nbsp;</span><span style='color:#004466'>transform</span><span
style='font-weight:bold;color:#FF0080'>(</span><span style='color:black'>people</span><span
style='font-weight:bold;color:#FF0080'>, </span><span style='color:black;
background:#CCFFCC'>person</span><span style='font-weight:bold;color:#FF0080;
background:#CCFFCC'>-&gt;</span><span style='color:black;background:#CCFFCC'>person</span><span
style='font-weight:bold;color:#FF0080;background:#CCFFCC'>.</span><span
style='color:#004466;background:#CCFFCC'>getAge</span><span style='font-weight:
bold;color:#FF0080;background:#CCFFCC'>()</span><span style='font-weight:bold;
color:#FF0080'>).</span><span style='color:#004466'>forEach</span><span
style='font-weight:bold;color:#FF0080'>(</span><span style='color:black'>System</span><span
style='font-weight:bold;color:#FF0080'>.</span><span style='color:black'>out</span><span
style='font-weight:bold;color:#FF0080'>::</span><span style='color:black'>println</span><span
style='font-weight:bold;color:#FF0080'>); </span><span style='color:#F27900'>//
Lambda expression</span></p>

<p style='margin:0in;font-family:"Courier New";font-size:10.0pt;color:#FF0080'><span
style='font-weight:bold'>}</span></p>

<p style='margin:0in;font-family:Calibri;font-size:11.0pt'>&nbsp;</p>

<p style='margin:0in;font-family:Calibri;font-size:11.0pt'>@note C++ introduced
the <span style='font-style:italic'>ranges</span> in C++20. Java has <span
style='font-style:italic'>streams</span> since Java 8 SDK.</p>

<p style='margin:0in;font-family:Calibri;font-size:11.0pt'>&nbsp;</p>

<p style='margin:0in;font-family:Calibri;font-size:11.0pt'>As matter of fact -
there are already predefined<span style='font-style:italic'> Functional
Interfaces</span> which are part of the <span style='font-style:italic'>java.util.function
</span>package,</p>

<p style='margin:0in;font-family:Calibri;font-size:11.0pt'>that is introduced
with Java 8 SDK.</p>

<p style='margin:0in;font-family:Calibri;font-size:11.0pt'>&nbsp;</p>

<p style='margin:0in;font-family:Calibri;font-size:11.0pt'><span
style='font-style:italic'>Function&lt;R, T&gt; </span>offers the same <span
style='font-style:italic'>apply</span>() callback as our manually written
interface.</p>

<p style='margin:0in;font-family:Calibri;font-size:11.0pt'>&nbsp;</p>

<p style='margin:0in;font-family:Calibri;font-size:11.0pt'>Actually, it's
callbacks interface - since it provides the signature for three additional
callbacks.</p>

<p style='margin:0in;font-family:Calibri;font-size:11.0pt'>It's even
composable, since you can instantiate it with the callable that will be applied
first, and </p>

<p style='margin:0in;font-family:Calibri;font-size:11.0pt'>then we can specify
additional callback, that will be invoked consequently.</p>

<p style='margin:0in;font-family:Calibri;font-size:11.0pt'>&nbsp;</p>

<p style='margin:0in;font-family:Calibri;font-size:11.0pt'>@note There are more
other useful predefined Functional Interfaces, like <span style='font-style:
italic'>Consumer&lt;T&gt;</span>==Functional&lt;Void, T&gt; to support </p>

<p style='margin:0in;font-family:Calibri;font-size:11.0pt'>the functional
programming style in Java.</p>

<p style='margin:0in;font-family:Calibri;font-size:11.0pt'>&nbsp;</p>

<h3 style='margin:0in;font-family:Calibri;font-size:12.0pt;color:#7030A0'>Exception
in signature</h3>

<p style='margin:0in;font-family:Calibri;font-size:11.0pt'>&nbsp;</p>

<p style='margin:0in;font-family:Calibri;font-size:11.0pt'>Interesting enough,
the <span style='background:#E5E0EC'>Exception Type</span> can be also part of
the function signature in Java</p>

<p><cite style='margin:0in;font-family:Calibri;font-size:9.0pt;color:#595959'>&nbsp;</cite></p>

<p style='margin:0in;font-family:"Courier New";font-size:10.0pt;color:#0080C0'>@FunctionalInterface</p>

<p style='margin:0in;font-family:"Courier New";font-size:10.0pt'><span
style='font-weight:bold;color:#BB7977'>interface </span><span style='font-weight:
bold;color:black'>CallableType</span><span style='font-weight:bold;color:#FF0080'>&lt;</span><span
style='color:black'>R</span><span style='font-weight:bold;color:#FF0080'>,</span><span
style='color:black'> T</span><span style='font-weight:bold;color:#FF0080'>&gt;
{</span></p>

<p style='margin:0in;font-family:"Courier New";font-size:10.0pt'><span
style='color:black'>&nbsp;&nbsp;&nbsp;&nbsp;R </span><span style='color:#004466'>apply</span><span
style='font-weight:bold;color:#FF0080'>(</span><span style='color:black'>T obj</span><span
style='font-weight:bold;color:#FF0080'>) </span><span style='font-weight:bold;
color:#BB7977'>throws </span><span style='color:black;background:#E5E0EC'>RemoteException</span><span
style='font-weight:bold;color:#FF0080'>;</span></p>

<p style='margin:0in;font-family:"Courier New";font-size:10.0pt;color:#FF0080'><span
style='font-weight:bold'>}</span></p>

<p style='margin:0in;font-family:Calibri;font-size:11.0pt'>&nbsp;</p>

<p style='margin:0in;font-family:Calibri;font-size:11.0pt'>or to be generic as
possible</p>

<p style='margin:0in;font-family:Calibri;font-size:11.0pt'>&nbsp;</p>

<p style='margin:0in;font-family:"Courier New";font-size:10.0pt;color:#0080C0'>@FunctionalInterface</p>

<p style='margin:0in;font-family:"Courier New";font-size:10.0pt'><span
style='font-weight:bold;color:#BB7977'>interface </span><span style='font-weight:
bold;color:black'>CallableType</span><span style='font-weight:bold;color:#FF0080'>&lt;</span><span
style='color:black'>R</span><span style='font-weight:bold;color:#FF0080'>,</span><span
style='color:black'> T</span><span style='font-weight:bold;color:#FF0080'>,</span><span
style='color:black'> E </span><span style='font-weight:bold;color:#BB7977'>extends</span><span
style='color:black'> Exception</span><span style='font-weight:bold;color:#FF0080'>&gt;
{</span></p>

<p style='margin:0in;font-family:"Courier New";font-size:10.0pt'><span
style='color:black'>&nbsp;&nbsp;&nbsp;&nbsp;R </span><span style='color:#004466'>apply</span><span
style='font-weight:bold;color:#FF0080'>(</span><span style='color:#0080C0'>@NonNull</span><span
style='color:black'> T obj</span><span style='font-weight:bold;color:#FF0080'>)
</span><span style='font-weight:bold;color:#BB7977'>throws</span><span
style='color:black'> E</span><span style='font-weight:bold;color:#FF0080'>;</span></p>

<p style='margin:0in;font-family:"Courier New";font-size:10.0pt;color:#FF0080'><span
style='font-weight:bold'>}</span></p>

<p style='margin:0in;font-family:"Courier New";font-size:10.0pt;color:#FF0080'>&nbsp;</p>

<p style='margin:0in;font-family:Calibri;font-size:11.0pt'>Our higher-order
function may preserve the exception indication in its own signature</p>

<p style='margin:0in;font-family:"Courier New";font-size:10.0pt;color:#FF0080'>&nbsp;</p>

<p style='margin:0in;font-family:"Courier New";font-size:10.0pt'><span
style='font-weight:bold;color:#FF0080'>&lt;</span><span style='color:black'>T</span><span
style='font-weight:bold;color:#FF0080'>,</span><span style='color:black'> R</span><span
style='font-weight:bold;color:#FF0080'>,</span><span style='color:black'> E </span><span
style='font-weight:bold;color:#BB7977'>extends</span><span style='color:black'>
Exception</span><span style='font-weight:bold;color:#FF0080'>&gt;</span><span
style='color:black'> R </span><span style='font-weight:bold;color:#004466'>invoke</span><span
style='font-weight:bold;color:#FF0080'>(</span><span style='font-weight:bold;
color:black'>CallableType</span><span style='font-weight:bold;color:#FF0080'>&lt;</span><span
style='color:black'>T</span><span style='font-weight:bold;color:#FF0080'>,</span><span
style='color:black'> R</span><span style='font-weight:bold;color:#FF0080'>,</span><span
style='color:black'> E</span><span style='font-weight:bold;color:#FF0080'>&gt;</span><span
style='color:black'> f</span><span style='font-weight:bold;color:#FF0080'>,</span><span
style='color:black'> T arg</span><span style='font-weight:bold;color:#FF0080'>)
</span><span style='font-weight:bold;color:#BB7977'>throws</span><span
style='color:black'> E </span><span style='font-weight:bold;color:#FF0080'>{</span></p>

<p style='margin:0in;font-family:"Courier New";font-size:10.0pt'><span
style='color:black'>&nbsp;&nbsp;&nbsp;&nbsp;</span><span style='color:#F27900'>//
do something</span></p>

<p style='margin:0in;font-family:"Courier New";font-size:10.0pt'><span
style='color:black'>&nbsp;&nbsp;&nbsp;&nbsp;</span><span style='font-weight:
bold;color:#BB7977'>return</span><span style='color:black'> f</span><span
style='font-weight:bold;color:#FF0080'>.</span><span style='color:#004466'>apply</span><span
style='font-weight:bold;color:#FF0080'>(</span><span style='color:black'>arg</span><span
style='font-weight:bold;color:#FF0080'>);</span></p>

<p style='margin:0in;font-family:"Courier New";font-size:10.0pt;color:#FF0080'><span
style='font-weight:bold'>}</span></p>

<p style='margin:0in;font-family:"Courier New";font-size:10.0pt;color:#FF0080'>&nbsp;</p>

<p style='margin:0in;font-family:Calibri;font-size:11.0pt'>or it can handle it
internally.</p>

<p style='margin:0in;font-family:Calibri;font-size:11.0pt'>&nbsp;</p>

<p style='margin:0in;font-family:Calibri;font-size:11.0pt'>In case that due to <span
style='font-style:italic'>interoperability</span> - the API expects the
Function Interface which is not throwable, and we use the one which may throw,
we can write the safe wrapper to bridge it</p>

<p style='margin:0in;font-family:"Courier New";font-size:10.0pt;color:#FF0080'>&nbsp;</p>

<p style='margin:0in;font-family:"Courier New";font-size:10.0pt'><span
style='font-weight:bold;color:#BB7977'>static </span><span style='font-weight:
bold;color:#FF0080'>&lt;</span><span style='color:black'>T</span><span
style='font-weight:bold;color:#FF0080'>,</span><span style='color:black'> R</span><span
style='font-weight:bold;color:#FF0080'>&gt; </span><span style='font-weight:
bold;color:black'>Function</span><span style='font-weight:bold;color:#FF0080'>&lt;</span><span
style='color:black'>T</span><span style='font-weight:bold;color:#FF0080'>,</span><span
style='color:black'> R</span><span style='font-weight:bold;color:#FF0080'>&gt; </span><span
style='font-weight:bold;color:#004466'>safeWrap</span><span style='font-weight:
bold;color:#FF0080'>(</span><span style='font-weight:bold;color:black'>ThrowingFunction</span><span
style='font-weight:bold;color:#FF0080'>&lt;</span><span style='color:black'>T</span><span
style='font-weight:bold;color:#FF0080'>,</span><span style='color:black'> R</span><span
style='font-weight:bold;color:#FF0080'>,</span><span style='color:black'> ?</span><span
style='font-weight:bold;color:#FF0080'>&gt;</span><span style='color:black'> f</span><span
style='font-weight:bold;color:#FF0080'>) {</span></p>

<p style='margin:0in;font-family:"Courier New";font-size:10.0pt'><span
style='color:black'>&nbsp;&nbsp;&nbsp;&nbsp;</span><span style='font-weight:
bold;color:#BB7977'>return</span><span style='color:black'> t </span><span
style='font-weight:bold;color:#FF0080'>-&gt; {</span></p>

<p style='margin:0in;font-family:"Courier New";font-size:10.0pt'><span
style='color:black'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span
style='font-weight:bold;color:#BB7977'>try </span><span style='font-weight:
bold;color:#FF0080'>{</span></p>

<p style='margin:0in;font-family:"Courier New";font-size:10.0pt'><span
style='color:black'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span
style='font-weight:bold;color:#BB7977'>return</span><span style='color:black'>
f</span><span style='font-weight:bold;color:#FF0080'>.</span><span
style='color:#004466'>apply</span><span style='font-weight:bold;color:#FF0080'>(</span><span
style='color:black'>t</span><span style='font-weight:bold;color:#FF0080'>);</span></p>

<p style='margin:0in;font-family:"Courier New";font-size:10.0pt'><span
style='color:black'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span
style='font-weight:bold;color:#FF0080'>} </span><span style='font-weight:bold;
color:#BB7977'>catch </span><span style='font-weight:bold;color:#FF0080'>(</span><span
style='color:black'>RuntimeException e</span><span style='font-weight:bold;
color:#FF0080'>) {</span></p>

<p style='margin:0in;font-family:"Courier New";font-size:10.0pt'><span
style='color:black'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span
style='font-weight:bold;color:#BB7977'>throw</span><span style='color:black'> e</span><span
style='font-weight:bold;color:#FF0080'>; </span><span style='color:#F27900'>//
Re-throw unchecked exceptions</span></p>

<p style='margin:0in;font-family:"Courier New";font-size:10.0pt'><span
style='color:black'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span style='font-weight:bold;color:#FF0080'>} </span><span
style='font-weight:bold;color:#BB7977'>catch </span><span style='font-weight:
bold;color:#FF0080'>(</span><span style='color:black'>Exception e</span><span
style='font-weight:bold;color:#FF0080'>) {</span></p>

<p style='margin:0in;font-family:"Courier New";font-size:10.0pt'><span
style='color:black'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span style='font-weight:bold;color:#BB7977'>throw new </span><span
style='color:#004466'>IllegalStateException</span><span style='font-weight:
bold;color:#FF0080'>(</span><span style='color:#A68500'>&quot;Unexpected
checked exception&quot;</span><span style='font-weight:bold;color:#FF0080'>,</span><span
style='color:black'> e</span><span style='font-weight:bold;color:#FF0080'>);</span></p>

<p style='margin:0in;font-family:"Courier New";font-size:10.0pt'><span
style='color:black'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span style='font-weight:bold;color:#FF0080'>}</span></p>

<p style='margin:0in;font-family:"Courier New";font-size:10.0pt'><span
style='color:black'>&nbsp;&nbsp;&nbsp;</span><span style='font-weight:bold;
color:#FF0080'>};</span></p>

<p style='margin:0in;font-family:"Courier New";font-size:10.0pt;color:#FF0080'><span
style='font-weight:bold'>}</span></p>

<p style='margin:0in;font-family:"Courier New";font-size:10.0pt;color:#FF0080'>&nbsp;</p>

<p style='margin:0in;font-family:"Courier New";font-size:10.0pt;color:#FF0080'>&nbsp;</p>

<h3 style='margin:0in;font-family:Calibri;font-size:12.0pt;color:#7030A0'>Variadic
arguments pack</h3>

<p style='margin:0in;font-family:"Courier New";font-size:10.0pt;color:#FF0080'>&nbsp;</p>

<p style='margin:0in;font-family:Calibri;font-size:11.0pt'>Unlike C++ - Java
doesn't support variadic arguments pack, at least not for expressing the
arbitrary number of </p>

<p style='margin:0in;font-family:Calibri;font-size:11.0pt'>heterogenous types.</p>

<p style='margin:0in;font-family:Calibri;font-size:11.0pt'>It supports only
variadic arguments list of the same type</p>

<p style='margin:0in;font-family:Calibri;font-size:11.0pt'>&nbsp;</p>

<p style='margin:0in;font-family:"Courier New";font-size:10.0pt;color:#0080C0'>@FunctionalInterface</p>

<p style='margin:0in;font-family:"Courier New";font-size:10.0pt'><span
style='font-weight:bold;color:#BB7977'>interface </span><span style='font-weight:
bold;color:black'>CallableType</span><span style='font-weight:bold;color:#FF0080'>&lt;</span><span
style='color:black'>R</span><span style='font-weight:bold;color:#FF0080'>,</span><span
style='color:black'> T</span><span style='font-weight:bold;color:#FF0080'>,</span><span
style='color:black'> E </span><span style='font-weight:bold;color:#BB7977'>extends</span><span
style='color:black'> Exception</span><span style='font-weight:bold;color:#FF0080'>&gt;
{</span></p>

<p style='margin:0in;font-family:"Courier New";font-size:10.0pt'><span
style='color:black'>&nbsp;&nbsp;&nbsp;&nbsp;R </span><span style='color:#004466'>apply</span><span
style='font-weight:bold;color:#FF0080'>(</span><span style='color:#0080C0'>@NonNull</span><span
style='color:black'> T</span><span style='font-weight:bold;color:#FF0080'>...</span><span
style='color:black'> objs</span><span style='font-weight:bold;color:#FF0080'>) </span><span
style='font-weight:bold;color:#BB7977'>throws</span><span style='color:black'>
E</span><span style='font-weight:bold;color:#FF0080'>;</span></p>

<p style='margin:0in;font-family:"Courier New";font-size:10.0pt;color:#FF0080'><span
style='font-weight:bold'>}</span></p>

<p style='margin:0in;font-family:"Courier New";font-size:10.0pt;color:#FF0080'>&nbsp;</p>

<p style='margin:0in;font-family:"Courier New";font-size:10.0pt;color:#FF0080'>&nbsp;</p>

<h2 style='margin:0in;font-family:Calibri;font-size:14.0pt;color:#2E75B5'>Conclusion</h2>

<p style='margin:0in;font-family:"Courier New";font-size:10.0pt;color:#FF0080'>&nbsp;</p>

<p style='margin:0in;font-family:Calibri;font-size:11.0pt'>At the end -
comparing these two approaches, Java is doing quite well, considering the fact
that the generic - template </p>

<p style='margin:0in;font-family:Calibri;font-size:11.0pt'>programming was not
originally part of the language core - it's added afterwards, with Java 5 SDK -
implementing it as </p>

<p style='margin:0in;font-family:Calibri;font-size:11.0pt'><span
style='font-style:italic'>type erasur</span>e (stripping all type information -
and treating it as Object inside the function template).</p>

<p style='margin:0in;font-family:Calibri;font-size:11.0pt'>&nbsp;</p>

<p style='margin:0in;font-family:Calibri;font-size:11.0pt'>More on <span
style='font-weight:bold'>type erasure</span>, and different interpretations -
in different languages:</p>

<ul type=disc style='direction:ltr;unicode-bidi:embed;margin-top:0in;
 margin-bottom:0in'>
 <li style='margin-top:0;margin-bottom:0;vertical-align:middle'><span
     style='font-family:Calibri;font-size:11.0pt'><span
     style='mso-spacerun:yes'> </span></span><a
     href="https://github.com/damirlj/modern_cpp_tutorials?tab=readme-ov-file#tut7"><span
     style='font-family:Calibri;font-size:11.0pt'>https://github.com/damirlj/modern_cpp_tutorials?tab=readme-ov-file#tut7</span></a></li>
</ul>

<p style='margin:0in;margin-left:.375in;font-family:Calibri;font-size:11.0pt'>&nbsp;</p>

<p style='margin:0in;font-family:Calibri;font-size:11.0pt'>The only where Java
is inferior in fulfilling this particular task - is the fact that heterogenous
variadic argument pack is not </p>

<p style='margin:0in;font-family:Calibri;font-size:11.0pt'>supported (nor the
fold expressions, type-traits, auto type deduction and all other mechanics of
template metaprogramming).</p>

<p style='margin:0in;font-family:Calibri;font-size:11.0pt'>The fact is - that
both languages inspire each other to be a better version of itself: embracing
mutually the concepts that </p>

<p style='margin:0in;font-family:Calibri;font-size:11.0pt'>make the language
more expressive, safe and overall modern: tailored to customer expectations.</p>

<p style='margin:0in;font-family:Calibri;font-size:11.0pt'>&nbsp;</p>

</div>

</div>

</div>

<div>

<p style='margin:0in'>&nbsp;</p>

<p style='text-align:left;margin:0in;font-family:Arial;font-size:9pt;
color:#969696;direction:ltr'>Created with OneNote.</p>

</div>

</body>

</html>
